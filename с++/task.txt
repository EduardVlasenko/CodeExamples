Необходимо реализовать иерархию классов для генерации случайных чисел, а также фабрику для создания экземпляра класса генератора с заданными параметрами.

Интерфейс базового класса генератора:
class TRandomNumberGenerator {
public:
virtual -TRandomNumberGenerator();
virtual double Generate() const = 0;
};

Интерфейс фабрики:
class TRandomFactory {
private:
TRandomFactory();
-TRandomFactory();
TRandomFactory(const TRandomFactory &);
TRandomFactory &operator = (const TRandomFactory &);
public:
static TRandomFactory &Instance();
TRandomNumberGenerator *MakeGenerator(const std::map<std::string, std::string> &params);
};

Необходимо поддержать три типа распределения: нормальное, Бернулли, логистическое (функции распределения и параметры можно посмотреть в википедии/учебнике/вспомнить).

Тип распределения задаётся параметром "type", который принимает значения из множества "gauss", "bernoulli", "logistic". В случае нормального и логистического распределений задаются параметры "m" и "s" (вещественные числа, преобразованные в строки). В случае распределения Бернулли задаётся параметр "p" - вероятность выпадения единицы.





В пространстве имён NPolynom реализуйте шаблонный класс 'TPolynom' («Многочлен от одной переменной») на основе контейнера 'std::vector'. Тип коэффициентов многочлена передавайте в качестве параметра шаблона. Хранение коэффициентов должно быть плотным (то есть должны храниться все коэффициенты, в том числе и промежуточные нулевые). Предусматривать возможность работы с нецелыми или отрицательными степенями переменной не нужно. Сделайте следующее: 
•[0.] Напишите конструктор, создающий многочлен нулевой степени по указанному коэффициенту. 
•[1.] Перегрузите операторы '==' и '!='. Ваш код должен быть очень простым. 
•[2.] Перегрузите операторы '+, -, *', а также соответствующие операторы вида '@='. Учтите, что должны быть определены и такие арифметические операции, в которых один из аргументов является скаляром. 
•[3.] Напишите функцию 'Degree' для вычисления степени многочлена (считайте, что у нулевого многочлена степень равна -1). 
•[4.] Перегрузите операторы '[ ]' для получения (или изменения) коэффициента многочлена перед заданной степенью переменной. Оператор должен работать для любых степеней (в том числе б'о'льших текущей максимальной). 
•[5.] Перегрузите оператор '()' для вычисления значения многочлена в точке. Постарайтесь написать эффективный код. 
•[6.] Перегрузите оператор '«' для печати многочлена в поток вывода. 
•[7.] Предусмотрите функции 'begin' и 'end' для доступа к итераторам (в т.ч. константного доступа), позволяющим перебрать или изменять коэффициенты многочлена. Учтите, что итератор должен иметь правильное состояние после того, как коэффициенты многочлена будут изменены. 
•[8.] Перегрузите операторы '/' и '(считайте, что в этом случае деление коэффициентов допустимо). Учтите, что должны быть определены и такие арифметические операции, в которых один из аргументов является скаляром. 
•[9.] Перегрузите оператор ',' для вычисления наибольшего общего делителя (вызов будет делаться так: '(a, b)'). 
